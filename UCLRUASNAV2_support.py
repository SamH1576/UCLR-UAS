#! /usr/bin/env python
#
# Support module generated by PAGE version 4.8.4
# In conjunction with Tcl version 8.6
#    Dec 09, 2016 09:39:17 PM


import sys
import time
import threading
import Queue
import MAVComms
import missionPayload

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1
	
def init(top, gui, *args, **kwargs):
    global w, top_level, root, onMission
    w = gui
    top_level = top
    root = top
    onMission = False
	
def setupScreenUpdating():
    global scrQueue, q_lock, scrThread
    print 'Starting screen-updating'
    #setup a queue for updates, 20 items long
    scrQueue = Queue.Queue(20)
    #set q_lock to prevent multiple routines updating the queue at the same time
    q_lock = threading.Lock()
    #start a thread to deal with updating the GUI
    scrThread = threading.Thread(name='ScreenUpdates', target=screenUpdates)
    scrThread.setDaemon(True) #ie when the module exits: kill thread
    scrThread.start()
    with q_lock:
        scrQueue.put(['EntryStatus','Screen update activated'])
	
def set_Tk_var():
    # These are Tk variables used passed to Tkinter and must be
    # defined before the widgets using them are created.
    global missiontype
    missiontype = IntVar()

def CloseWindow():
    print('UCLRUASNAV2_support.CloseWindow')
    sys.stdout.flush()
    destroy_window()
	
def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

def startMission():
    global q_lock, onMission, VecCon
    missionNo = missiontype.get()

    if(missionNo == 1 and onMission!= True):
        onMission = True
        GPSTarget = [-35.3615286,149.1617417]
        print 'Starting mission'
        with q_lock:
            scrQueue.put(['EntryStatus','Starting payload mission'])
            
        VecCon = startMAVComms()
            
        if(VecCon is not None):
            with q_lock:
                scrQueue.put(['EntryStatus','Initialising mission thread'])
            global payloadDeployed
            payloadDeployed = threading.Event()
            missionPayload.startMission(VecCon, GPSTarget, payloadDeployed, q_lock, scrQueue)
            missionThread = threading.Thread(name= 'currMission', target=missionReply, args=(payloadDeployed, VecCon))
            missionThread.setDaemon(True) #ie when the module exits: kill thread
            missionThread.start()
        else:
            print('Could not connect to MAV')
            onMission = False
    

def stopMission():
    global payloadDeployed, onMission
    if(onMission):
        payloadDeployed.set()
    
def missionReply(payloadDeployed, VecCon):
    global onMission
    #uses threading event to wait for payload to be deployed
    payloadDeployed.wait()
    #gives time for the mission thread to exit (max 0.5 seconds)
    time.sleep(0.6)
    payloadDeployed.clear()
    updatestring = 'Payload Deployed/Exited: ' + time.strftime("%H:%M:%S")
    with q_lock:
        scrQueue.put(['EntryStatus',updatestring])
        scrQueue.put(['EntryX1',''])
        scrQueue.put(['EntryY1',''])
        scrQueue.put(['EntryTotal1',''])

    onMission = False

def startMAVComms():
    with q_lock:
        scrQueue.put(['EntryStatus', 'Attempting to connect'])
        
    NewConnection = MAVComms.MAVconnect('udp:127.0.0.1:14551') 
    while(NewConnection.Connecting):
        #waiting to finish connecting
        pass
        
    if(NewConnection.ConnErrFlag != True):
        with q_lock:
            scrQueue.put(['EntryStatus','Connected to MAV'])
        return NewConnection
    else:
        with q_lock:
            scrQueue.put(['EntryStatus','Error connecting to MAV'])
        return None

def screenUpdates():
    #syntax is scrQueue.put(element to update, new value)
    global w, q_lock, scrQueue
    print 'Screen update thread activated'
    time.sleep(1)
    data = ''
    while 1:
        with q_lock:
            if not scrQueue.empty():
                data = scrQueue.get()
                #Is this an entry - if so use this method. Further methods will be written for other elements
                if(data[0].find('EntryStatus') == 0): 
                    elementToUpdate = getattr(w, data[0])
                    elementToUpdate.delete(1.0, END)
                    elementToUpdate.insert(1.0, data[1])
                elif(data[0].find('Entry') == 0): 
                    elementToUpdate = getattr(w, data[0])
                    elementToUpdate.delete(0, END)
                    elementToUpdate.insert(0, data[1])
            if data == 'quit':
                break 

if __name__ == '__main__':
    import UCLRUASNAV2
    UCLRUASNAV2.vp_start_gui()
